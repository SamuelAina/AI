CREATE PROC [dbo].[usp_process_workbench_xlx_byfile]  
   @FileName    varchar(255)  
  ,@deal_id     VARCHAR(MAX) OUTPUT  
  ,@ExecResult  VARCHAR(MAX) OUTPUT  
AS  
/*  
  DECLARE  @deal_id VARCHAR(MAX), @ExecResult VARCHAR(MAX)  
  EXEC [dbo].[usp_process_workbench_xlx_byfile] '\\sgwpaupcd04\Dat$\DATA\temp\19DEC2023-TUE\Fee-Booking-Form-DEAL-CF-2022-06-1857393FB1_18_Dec_2023.xlsx', @deal_id OUT, @ExecResult OUT  
  SELECT  @deal_id, @ExecResult  
  
  EXEC [dbo].[usp_process_workbench_xlx_byfile] '\\sgwpaupcd04\Dat$\DATA\temp\19DEC2023-TUE\Fee-Booking-Form-DEAL-CF-2022-06-1857393FB2_18_Dec_2023.xlsx'  
*/  
BEGIN  
 SET NOCOUNT ON  
 SELECT @ExecResult='OK'  
  
 exec master.[dbo].[usp_tryconvert_UNC_to_drive] @FileName,@FileName out  
  
 DECLARE @dbname varchar(255)=db_name()  
 DECLARE @Error  varchar(255)  
  
  
 DECLARE @uniqueID varchar(100)= convert(varchar(100), NEWID())  
 DECLARE @temp_feebooking_cf    varchar(255)= 'tmptbl_'+@uniqueID+'_Feebooking CF'  
     ,@temp_fee_recognition_and_sharing    varchar(255)= 'tmptbl_'+@uniqueID+'_Fee Recognition & Sharing'       
     ,@tmp_bugs  varchar(255)= 'tmptbl_'+@uniqueID+'_tmp_bug'  --One row table  
  
 --First worksheet...  
 EXEC master.[dbo].[usp_get_data_from_xls_using_tempdb]    
   @FileName   = @FileName  
  ,@Worksheet  = 'Feebooking CF'  
  ,@RangeDef   = 'A1:E2000'   
  ,@TableName  = @temp_feebooking_cf  
  ,@TargetDb   = @dbname  
  ,@no_toprow_reformat  = 1  
  ,@Error      = @Error OUTPUT   
  
 --Second worksheet...  
 EXEC master.[dbo].[usp_get_data_from_xls_using_tempdb]    
  @FileName   = @FileName  
  ,@Worksheet  = 'Fee Recognition & Sharing'  
  ,@RangeDef   = 'A1:L2000'   
  ,@TableName  = @temp_fee_recognition_and_sharing  
  ,@TargetDb   = @dbname  
  ,@no_toprow_reformat  = 1  
  ,@Error      = @Error OUTPUT  
  
  
 DECLARE @field_list_t TABLE (field_name VARCHAR(255))  
 INSERT  @field_list_t  
 SELECT DISTINCT field_name FROM _settings_workbench_mapping WHERE field_name IN (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='bugs')--WHERE  refWorksheet='Feebooking CF'  
  
 DECLARE @l VARCHAR(MAX)=''  
 SELECT  @l = @l +',['+ field_name+'] = CONVERT(VARCHAR(MAX), NULL)'  
 FROM    @field_list_t  
  
 SELECT  @l=SUBSTRING(@l,2,DATALENGTH(@l)-1)  
 DECLARE @sqlcr VARCHAR(MAX) ='SELECT ' + @l + ' INTO ['+@tmp_bugs+']'  
 EXEC   (@sqlcr)  
  
 WHILE (SELECT COUNT(*) FROM @field_list_t) >0  
 BEGIN  
   DECLARE @field_name VARCHAR(255)  
  
   SELECT  @field_name = field_name  FROM @field_list_t  
  
   DECLARE  @sql_updates VARCHAR(MAX)  
   SELECT   @sql_updates ='DECLARE @result VARCHAR(255);   
         EXEC usp_get_value_from_workbench_file_by_field '''+@temp_feebooking_cf+''','''+[refvalue1]+''', @result  OUT;  
         UPDATE  ['+@tmp_bugs+'] SET ['+@field_name+']=@result  
        '  
   FROM     _settings_workbench_mapping WHERE field_name=@field_name  
  
  
   EXEC  (@sql_updates)  
  
  
   DELETE @field_list_t WHERE field_name=@field_name  
 END  
  
  --If the deal no has been used before then quit because  
 --we don't want to have any duplicates   
   
 DECLARE @sql_check_deal_no   NVARCHAR(MAX) = 'SELECT @val=[deal ID] FROM ['+@tmp_bugs+']'  
    EXECUTE sp_executesql @sql_check_deal_no, N'@val VARCHAR(255) OUTPUT', @val = @deal_id OUTPUT   
  
    IF(@deal_id IS NULL)  
    BEGIN  
        SELECT @ExecResult ='Invalid Deal No in file'  
        GOTO finished  
    END  
  
    IF EXISTS(SELECT 1 FROM bugs WHERE [deal id] = @deal_id)  
    BEGIN  
        SELECT @ExecResult ='Deal already in the database'  
  PRINT '*****>Deal already in the database<*****'  
        GOTO  finished  
    END   
  
  
 DECLARE @sql_overide VARCHAR(MAX)='UPDATE ['+@tmp_bugs+']   
                                    SET [FBF Submitted for review in Workbench]=getdate()  
                                       ,[Date of receipt of Final Documents]=getdate()  
            ,[Deal submitted for review in ODT]=getdate()  
            ,[Recognition Month]=UPPER([Recognition Month])  
            '  
  
 EXEC (@sql_overide)  
  
  
  
 DECLARE @_s VARCHAR(MAX)=  
 '  
  SELECT   
    [Accounting Treatment]         =COL_1  
   ,[DEAL ID]      ='''+@deal_id+'''           
   ,[Total Fee]                    =COL_7  
   ,[Amortisation End Date]        =COL_9  
   ,[Amortisation Start Date]      =COL_8  
   ,[Management Booking Location]  =COL_5  
   ,[GL Unit for ACBS]             =COL_2   
  INTO  #temp_fee_recognition_and_sharing  
  FROM ['+@temp_fee_recognition_and_sharing+']  
  WHERE COL_1 <> ''ACCOUNTING TREATMENT''  
   
  UPDATE B  
  SET [Department Booking ID] =X.[Department Booking ID]  
  FROM  
  (  
  select TOP 1 [DEAL ID],[Department Booking ID]=[GL Unit for ACBS]   
  from   #temp_fee_recognition_and_sharing  
  where  [Accounting Treatment]=''Upfront''  
  ) X  
  INNER JOIN ['+@tmp_bugs+'] B on B.[Deal ID]=X.[DEAL ID]   
  
  
  UPDATE B  
  SET [Management Booking Location for Fee] =X.[Management Booking Location for Fee]  
  FROM  
  (  
  select TOP 1 [DEAL ID],[Management Booking Location for Fee]=[Management Booking Location]   
  from   #temp_fee_recognition_and_sharing  
  where  [Accounting Treatment]=''Upfront''  
  ) X  
  INNER JOIN ['+@tmp_bugs+'] B on B.[Deal ID]=X.[DEAL ID]   
  
  
  UPDATE B  
  SET [Department Booking ID for Amortisation] =X.[Department Booking ID for Amortisation]  
  FROM  
  (  
  select TOP 1 [DEAL ID],[Department Booking ID for Amortisation]=[GL Unit for ACBS]   
  from   #temp_fee_recognition_and_sharing  
  where  [Accounting Treatment]=''Amortise''  
  ) X  
  INNER JOIN ['+@tmp_bugs+'] B on B.[Deal ID]=X.[DEAL ID]  
  
  
  UPDATE B  
  SET [Management Booking Location for Amortisation] =X.[Management Booking Location for Amortisation]  
  FROM  
  (  
  select TOP 1 [DEAL ID],[Management Booking Location for Amortisation]=[Management Booking Location]   
  from   #temp_fee_recognition_and_sharing  
  where  [Accounting Treatment]=''Amortise''  
  ) X  
  INNER JOIN ['+@tmp_bugs+'] B on B.[Deal ID]=X.[DEAL ID]  
  
  
  UPDATE B  
  SET [Amortisation Start Date] =X.[Amortisation Start Date]  
  FROM  
  (  
  select TOP 1 [DEAL ID],[Amortisation Start Date]=[Amortisation Start Date]   
  from   #temp_fee_recognition_and_sharing  
  where  [Accounting Treatment]=''Amortise''  
  ) X  
  INNER JOIN ['+@tmp_bugs+'] B on B.[Deal ID]=X.[DEAL ID]  
  
  UPDATE B  
  SET [Amortisation End Date] =X.[Amortisation End Date]  
  FROM  
  (  
  select TOP 1 [DEAL ID],[Amortisation End Date]=[Amortisation End Date]   
  from   #temp_fee_recognition_and_sharing  
  where  [Accounting Treatment]=''Amortise''  
  ) X  
  INNER JOIN ['+@tmp_bugs+'] B on B.[Deal ID]=X.[DEAL ID]  
  
  UPDATE B  
  SET [Submitted by deal team Final Day1 (USD equivalent)] =X.[Total Fee]  
  FROM  
  (  
  select TOP 1 [DEAL ID],[Total Fee]=[Total Fee]   
  from   #temp_fee_recognition_and_sharing  
  where  [Accounting Treatment]=''Upfront''  
  ) X  
  INNER JOIN ['+@tmp_bugs+'] B on B.[Deal ID]=X.[DEAL ID]  
 '  
 EXEC (@_s)  
  
  
 --Apply mappings...  
 declare @update_mappings varchar(max)='  
 update B set [Deal Local (LCCY 1)]=[Currency per ODT]  
 from   ['+@tmp_bugs+'] B  
 inner join workbench_currency_mapping MC  
 on     B.[Deal Local (LCCY 1)]=MC.[Currency per Workbench]  
 where  [deal id]='''+@deal_id+'''  
  
  
 update B set [Primary Loan Booking Location]=ML.[Location per ODT]  
 from   ['+@tmp_bugs+'] B  
 inner join workbench_location_mapping ML  
 on     B.[Primary Loan Booking Location]=ML.[Location per Workbench]  
 where  [deal id]='''+@deal_id+'''  
  
 update B set [Fee Receipt Location]=ML.[Location per ODT]  
 from   ['+@tmp_bugs+'] B  
 inner join workbench_location_mapping ML  
 on     B.[Fee Receipt Location]=ML.[Location per Workbench]  
 where  [deal id]='''+@deal_id+'''  
  
  
 update B set [Management Booking Location for Fee]=ML.[Location per ODT]  
 from   ['+@tmp_bugs+'] B  
 inner join workbench_location_mapping ML  
 on     B.[Management Booking Location for Fee]=ML.[Location per Workbench]  
 where  [deal id]='''+@deal_id+'''  
  
 update B set [Management Booking Location for Amortisation]=ML.[Location per ODT]  
 from   ['+@tmp_bugs+'] B  
 inner join workbench_location_mapping ML  
 on     B.[Management Booking Location for Amortisation]=ML.[Location per Workbench]  
 where  [deal id]='''+@deal_id+'''  
 '  
 EXEC (@update_mappings)   
  
  
  
 DECLARE @sql_update_Customer_Class_number VARCHAR(MAX)='  
 UPDATE  b  
 SET    [Customer Class number]=M.[PSGL Customer Class]  
 FROM   ['+@tmp_bugs+'] b  
 inner join _settings_CUST_CLASS_MAPPING M   
 on b.[Client Segment] = M.[Customer Class Description]  
 '  
 PRINT(@sql_update_Customer_Class_number)  
  
 DECLARE @field_list VARCHAR(MAX)=''  
 SELECT  @field_list = @field_list + ',['+column_name+']'  
 FROM    INFORMATION_SCHEMA.COLUMNS  
 WHERE   table_name=@tmp_bugs  
  
 --DECLARE @sql_sel VARCHAR(MAX)='SELECT bg_short_desc=''New Project'',bg_reported_user=1,bg_reported_date=getdate(),bg_status=1,bg_priority=3,bg_org=0,bg_category=0,bg_project=66'+@field_list+' FROM ['+@tmp_bugs+']'  
 --EXEC (@sql_sel)  
  
 DECLARE @sql_ins_bugs VARCHAR(MAX)=  
 'INSERT bugs (bg_short_desc,bg_reported_user,bg_reported_date,bg_status,bg_priority,bg_org,bg_category,bg_project'+@field_list+')   
  SELECT  bg_short_desc=''New Project'',bg_reported_user=1,bg_reported_date=getdate(),bg_status=1,bg_priority=3,bg_org=0,bg_category=0,bg_project=66'+@field_list+'   
  FROM ['+@tmp_bugs+']'  
 EXEC (@sql_ins_bugs)  
    
 --We now need to append @tmp_bugs to  bugs...  
 --SELECT * INTO bugs_testing_20DEC2023 FROM bugs  
  
    --Now tidy up temp tables  
    Finished:   
    EXEC dbo.usp_deleteTempTables_byUniqeID @uniqueID    
END  
